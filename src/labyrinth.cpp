#include "labyrinth.h"

Labyrinth::Labyrinth() {
    initMap();
}

void Labyrinth::initMap() {
    // 1 — стена, 2 — монетка, 3 — враг, 4 — финиш, 0 — проход
    int initial[ROWS][COLS] = {
        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
        {1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1},
        {1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1},
        {1,0,1,0,0,0,0,0,0,3,0,0,0,1,0,0,1,0,0,1},
        {1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,0,0,1},
        {1,0,0,0,1,2,0,0,0,0,0,1,0,0,1,0,0,0,0,1},
        {1,0,1,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1},
        {1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1},
        {1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1},
        {1,0,0,0,0,0,0,1,0,0,0,0,0,3,0,1,0,1,0,1},
        {1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1},
        {1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1},
        {1,0,0,0,1,2,0,0,0,0,0,1,0,0,0,0,0,1,0,1},
        {1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1},
        {1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1},
        {1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1},
        {1,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,3,2,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1},
        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
    };
    for (int i = 0; i < ROWS; i++)
        for (int j = 0; j < COLS; j++)
            map[i][j] = initial[i][j];
}

bool Labyrinth::isWall(int x, int y) const {
    if (x < 0 || x >= ROWS || y < 0 || y >= COLS) return true; // проверка на вылет за границы
    return map[x][y] == 1; 
}

bool Labyrinth::isCoin(int x, int y) const {
    if (x < 0 || x >= ROWS || y < 0 || y >= COLS) return false;
    return map[x][y] == 2;
}

bool Labyrinth::isEnemy(int x, int y) const {
    if (x < 0 || x >= ROWS || y < 0 || y >= COLS) return false;
    return map[x][y] == 3;
}

bool Labyrinth::isFinish(int x, int y) const {
    if (x < 0 || x >= ROWS || y < 0 || y >= COLS) return false;
    return map[x][y] == 4;
}

void Labyrinth::removeCoin(int x, int y) {
    if (isCoin(x, y)) map[x][y] = 0;
}

void Labyrinth::reset() {
    initMap();
}